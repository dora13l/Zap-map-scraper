library(rvest)
simple <- read_html("https://www.zap-map.com/statistics/#points")
simple
library(rvest)
scrape_url <- read_html("https://www.zap-map.com/statistics/#points")
flat_html <- readLines(con = url)
library(Rcrawler)
install.packages("Rcrawler")
library(Rcrawler)
flat_html <- readLines(con = url)
flat_html <- readLines(con = scrape_url)
flat_html <- readLines(con = std(url)
flat_html <- readLines(con = std(url))
flat_html <- readLines(con = stdin(url))
flat_html <- readLines(con = stdin(scrape_url))
flat_html <- readLines(scrape_url)
scrape_url
library(dplyr)
scrape_url %>%
html_nodes("regions_div")
scrape_url %>%
html_nodes("#regions_div")
scrape_url %>%
html_nodes("#regions_div") %>%
html_text()
scrape_url %>%
html_nodes("#regions_div") %>%
html_nodes("g")
scrape_url %>%
html_nodes("g") %>%
scrape_url %>%
html_nodes("g")
scrape_url %>%
html_nodes("h4")
scrape_url %>%
html_nodes("h2")
scrape_url %>%
html_nodes("#regions_div")
scrape_url %>%
html_nodes("#regions_div g")
scrape_url %>%
html_nodes("#regions_div")
scrape_url %>%
html_nodes("#regions_div") %>%
html_nodes("g")
scrape_url %>%
html_nodes(g)
scrape_url %>%
html_nodes("g")
scrape_url <- read_html("https://www.zap-map.com/statistics/")
scrape_url %>%
html_nodes("g")
install.packages('RSelenium')
checkForServer() # search for and download Selenium Server java binary.  Only need to run once.
library('RSelenium')
checkForServer() # search for and download Selenium Server java binary.  Only need to run once.
ile.path(find.package("RSelenium")
file.path(find.package("RSelenium")
file.path(find.package("RSelenium"), "examples/serverUtils")
vignette("RSelenium-docker", package = "RSelenium")
driver<- rsDriver()
driver<- rsDriver()
library(netstat)
rD[["server"]]$stop()
driver<- rsDriver()
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
driver<- rsDriver()
rD <- rsDriver(verbose = TRUE,
port= free_port(),
browserName = 'chromeBeta',
chromever = '83.0.4103.39',
check = TRUE)
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
driver<- rsDriver(verbose = TRUE,
port=4567L,
browserName = 'chromeBeta',
chromever = '83.0.4103.39',
check = TRUE)
driver<- rsDriver(verbose = TRUE,
port=4567L,
browserName = 'chrome',
chromever = '83.0.4103.39',
check = TRUE)
driver<- rsDriver()
driver<- rsDriver(browserName = 'C:/Users/doreen.lam/AppData/Local/Google/Chrome Beta/Application/chrome')
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
driver<- rsDriver(browserName = 'C:/Users/doreen.lam/AppData/Local/Google/Chrome Beta/Application/chrome')
driver<- rsDriver(browserName = 'chrome')
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
driver<- rsDriver(browserName = 'chrome')
driver<- rsDriver()
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
driver<- rsDriver()
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
driver<- rsDriver()
remote_driver$navigate("https://www.latlong.net/convert-address-to-lat-long.html")
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
driver<- rsDriver()
remote_driver <- driver[["client"]]
remote_driver$navigate("https://www.latlong.net/convert-address-to-lat-long.html")
address_element <- remote_driver$findElement(using = 'class', value = 'width70')
address_element <- remote_driver$findElement(using = 'class', value = 'width70')
button_element <- remote_driver$findElement(using = 'class', value = "button")
button_element$clickElement()
address_element <- remote_driver$findElement(using = 'class', value = 'width70')
address_element$sendKeysToElement(list("Lombard Street, San Francisco"))
button_element <- remote_driver$findElement(using = 'class', value = "button")
button_element$clickElement()
out <- remote_driver$findElement(using = "class", value="coordinatetxt")
lat_long <- out$getElementText()
lat_long
remote_driver$navigate("https://www.zap-map.com/statistics/")
out <- remote_driver$findElement(using = "fill", value="#222222")
out <- remote_driver$findElement(using = "class", value="text")
out <- remote_driver$findElement(using = "tag name", value="text")
test <- out$getElementText()
test
el <- remote_driver$findElements(using = "tag name", value="text")
els <- remote_driver$findElements(using = "tag name", value="text")
for(val in length(els)){
elem <- els[[val]]
class(elem)
print(elem$getElementText())
}
els
str(els, max=1)
df_all <- data.frame()
df <- data.frame(link = unlist(sapply(els, function(x){x$getElementText()})))
df_all <- rbind(df_all, df)
View(df_all)
View(df_all)
# kills current servers
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
# Open up the link
remote_driver$navigate("https://www.zap-map.com/statistics/")
# opens up a new chrome page
driver<- rsDriver()
remote_driver <- driver[["client"]]
# Open up the link
remote_driver$navigate("https://www.zap-map.com/statistics/")
# Grabbing all tag names with 'text' this will create a list
els <- remote_driver$findElements(using = "tag name", value="text")
# Create an empty dataframe
df_all <- data.frame()
df <- data.frame(text = unlist(sapply(els, function(x){x$getElementText()})))
df_all <- rbind(df_all, df)
View(df)
View(df_all)
View(df)
# Zapmap text
zapmap_text <- data.frame(text = unlist(sapply(els, function(x){x$getElementText()})))
View(zapmap_text)
#
table <- remote_driver$findElements(using = "class", value="cols_section")
table_text <- data.frame(text = unlist(sapply(table, function(x){x$getElementText()})))
View(table_text)
library(rvest)
library(dplyr)
scrape_url <- read_html("https://www.zap-map.com/statistics/")
scrape_url %>%
html_nodes(".cols_section h4")
test <- as.data.frame(scrape_url %>%
html_nodes(".cols_section h4"))
test <- scrape_url %>%
html_nodes(".cols_section h4")
View(test)
test1 <- data.frame(test = unlist(sapply(test, function(x){x$getElementText()})))
View(test)
test <- scrape_url %>%
html_nodes(".cols_section h4") %>%
html_text2()
test <- scrape_url %>%
html_nodes(".cols_section h4") %>%
html_text2()
test <- as.data.frame(test)
View(test)
#===============================
# You can get the numbers in the tables this way but you end up with very long values in one cell
#===============================
table <- remote_driver$findElements(using = "class", value="cols_section h4")
View(test)
Date <- scrape_url %>%
html_nodes(".xi_box h2") %>%
html_text2()
Date <- as.data.frame(Date)
View(Date)
View(Date)
library(googlesheets4)
View(Date)
# Add to the googlesheet
# Get the date first
Date <- Date[2,1]
Date <- gsub("Rapid/Ultra-rapid Chargers - " ,"", Date)
Date <- scrape_url %>%
html_nodes(".xi_box h2") %>%
html_text2()
Date <- as.data.frame(Date)
Date
Date <- gsub("Rapid/Ultra-rapid Chargers - " ,"", Date$Date)
Date <- scrape_url %>%
html_nodes(".xi_box h2") %>%
html_text2()
Date <- as.data.frame(Date)
View(Date)
Date1 <- gsub("Rapid/Ultra-rapid Chargers - " ,"", Date$Date)
View(Date)
# Add to the googlesheet
# Get the date first
Date1 <- Date[2,1]
Date1 <- gsub("Rapid/Ultra-rapid Chargers – " ,"", Date1)
# Add to the googlesheet
# Get the date first
Date <- Date[2,1]
Date <- gsub("Rapid/Ultra-rapid Chargers – " ,"", Date)
Date <- as.Date(Date)
Date <- gsub("th" ,"", Date)
# Get the date
Date <- scrape_url %>%
html_nodes(".xi_box h2") %>%
html_text2()
Date <- as.data.frame(Date)
# Reduce to just the date
Date <- Date[2,1]
Date <- gsub("Rapid/Ultra-rapid Chargers – " ,"", Date)
Date <- gsub("th " ,"", Date)
# Get the date
Date <- scrape_url %>%
html_nodes(".xi_box h2") %>%
html_text2()
Date <- as.data.frame(Date)
# Reduce to just the date
Date <- Date[2,1]
Date <- gsub("Rapid/Ultra-rapid Chargers – " ,"", Date)
Date <- gsub("th" ,"", Date)
Date <- gsub(" " ,"-", Date)
Date <- as.Date(Date)
View(zapmap_text)
# kills current servers
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
# opens up a new chrome page
driver<- rsDriver()
# If you want to find the first element text use this
out <- remote_driver$findElement(using = "tag name", value="text")
remote_driver <- driver[["client"]]
# Open up the link
remote_driver$navigate("https://www.zap-map.com/statistics/")
# If you want to find the first element text use this
out <- remote_driver$findElement(using = "tag name", value="text")
one_el <- out$getElementText()
one_el
# Grabbing all tag names with 'text' this will create a list
els <- remote_driver$findElements(using = "tag name", value="text")
# Zapmap text for the charger split by UK
zapmap_text <- data.frame(text = unlist(sapply(els, function(x){x$getElementText()})))
View(zapmap_text)
# If you want to find the first element text use this
out <- remote_driver$findElement(using = "", value="text")
# Grabbing all tag names with 'text' this will create a list
els <- remote_driver$findElements(using = "/text")
# Grabbing all tag names with 'text' this will create a list
els <- remote_driver$findElements(using = "xpath", value="/text")
# Zapmap text for the charger split by UK
zapmap_text <- data.frame(text = unlist(sapply(els, function(x){x$getElementText()})))
# Grabbing all tag names with 'text' this will create a list
els <- remote_driver$findElements(using = "tag name", value="text")
# Zapmap text for the charger split by UK
zapmap_text <- data.frame(text = unlist(sapply(els, function(x){x$getElementText()})))
# If you want to find the first element text use this
out <- remote_driver$findElement(using = "xpath", value="//text")
# Grabbing all tag names with 'text' this will create a list
els <- remote_driver$findElements(using = "tag name", value="text")
# Zapmap text for the charger split by UK
zapmap_text <- data.frame(text = unlist(sapply(els, function(x){x$getElementText()})))
View(table_text)
View(zapmap_text)
# Some values do not have the <text> tag.
Regions <- zapmap_text[36:49,]
zapmap_text[36:49,]
# Some values do not have the <text> tag.
Regions <- as.data.frame(zapmap_text[36:49,])
View(Regions)
# Some values do not have the <text> tag.
Regions <- as.data.frame(region = zapmap_text[36:49,])
View(zapmap_text)
pecentages <- as.data.frame(zapmap_text[50,55])
pecentages <- as.data.frame(zapmap_text[50:55,])
View(pecentages)
names(Regions)[1] <- "Region"
View(Regions)
View(Regions)
Region[9,]
Regions[9,]
Regions$Region = gsub("North East", "North East (England)", Regions$Region)
Regions$Region = gsub("North West", "North West (England)", Regions$Region)
Regions$Region = gsub("Yorkshire and t…", "Yorkshire and The Humber", Regions$Region)
Regions$Region = gsub("East Midlands", "East Midlands (England)", Regions$Region)
Regions$Region = gsub("West Midlands", "West Midlands (England)", Regions$Region)
Regions$Region = gsub("Greater London", "London", Regions$Region)
Regions$Region = gsub("South East", "South East (England)", Regions$Region)
Regions$Region = gsub("South West", "South West (England)", Regions$Region)
Regions$Region = gsub("Wales", "Wales", Regions$Region)
Regions$Region = gsub("Northern Ireland", "Northern Ireland", Regions$Region)
Regions$Region = gsub("Scotland", "Scotland", Regions$Region)
Regions <- Regions[-c(13,14);]
Regions <- Regions[-c(13,14),]
percentages <- as.data.frame(zapmap_text[50:55,])
View(percentages)
percentages$Region <- NA
View(percentages)
names(percentages)[1] <- "percentages"
# Some values do not have the <text> tag.
Regions <- as.data.frame(zapmap_text[36:49,])
names(Regions)[1] <- "Region"
percentages <- as.data.frame(zapmap_text[50:55,])
names(percentages)[1] <- "percentages"
Regions$Region = gsub("North East", "North East (England)", Regions$Region)
Regions$Region = gsub("North West", "North West (England)", Regions$Region)
Regions$Region = gsub("Yorkshire and t…", "Yorkshire and The Humber", Regions$Region)
Regions$Region = gsub("East Midlands", "East Midlands (England)", Regions$Region)
Regions$Region = gsub("West Midlands", "West Midlands (England)", Regions$Region)
Regions$Region = gsub("Greater London", "London", Regions$Region)
Regions$Region = gsub("South East", "South East (England)", Regions$Region)
Regions$Region = gsub("South West", "South West (England)", Regions$Region)
Regions$Region = gsub("Wales", "Wales", Regions$Region)
Regions$Region = gsub("Northern Ireland", "Northern Ireland", Regions$Region)
Regions$Region = gsub("Scotland", "Scotland", Regions$Region)
Regions <- Regions[-c(13,14),]
Regions <- as.data.frame(Regions[-c(13,14),])
# Some values do not have the <text> tag.
Regions <- as.data.frame(zapmap_text[36:49,])
names(Regions)[1] <- "Region"
percentages <- as.data.frame(zapmap_text[50:55,])
names(percentages)[1] <- "percentages"
Regions$Region = gsub("North East", "North East (England)", Regions$Region)
Regions$Region = gsub("North West", "North West (England)", Regions$Region)
Regions$Region = gsub("Yorkshire and t…", "Yorkshire and The Humber", Regions$Region)
Regions$Region = gsub("East Midlands", "East Midlands (England)", Regions$Region)
Regions$Region = gsub("West Midlands", "West Midlands (England)", Regions$Region)
Regions$Region = gsub("Greater London", "London", Regions$Region)
Regions$Region = gsub("South East", "South East (England)", Regions$Region)
Regions$Region = gsub("South West", "South West (England)", Regions$Region)
Regions$Region = gsub("Wales", "Wales", Regions$Region)
Regions$Region = gsub("Northern Ireland", "Northern Ireland", Regions$Region)
Regions$Region = gsub("Scotland", "Scotland", Regions$Region)
Regions <- as.data.frame(Regions[-c(13,14),])
percentages$Region <- NA
View(Regions)
names(Regions)[1] <- "Region"
View(percentages)
View(Regions)
percentages[1,2] <- "London"
percentages[2,2] <- "South East (England)"
percentages[3,2] <- "North West (England)"
percentages[4,2] <- "East of England"
percentages[5,2] <- "South West (England)"
percentages[6,2] <- "Scotland"
Regions <- merge(Regions, percentages, by="Region")
View(Regions)
# Some values do not have the <text> tag.
Regions <- as.data.frame(zapmap_text[36:49,])
names(Regions)[1] <- "Region"
percentages <- as.data.frame(zapmap_text[50:55,])
names(percentages)[1] <- "percentages"
Regions$Region = gsub("North East", "North East (England)", Regions$Region)
Regions$Region = gsub("North West", "North West (England)", Regions$Region)
Regions$Region = gsub("Yorkshire and t…", "Yorkshire and The Humber", Regions$Region)
Regions$Region = gsub("East Midlands", "East Midlands (England)", Regions$Region)
Regions$Region = gsub("West Midlands", "West Midlands (England)", Regions$Region)
Regions$Region = gsub("Greater London", "London", Regions$Region)
Regions$Region = gsub("South East", "South East (England)", Regions$Region)
Regions$Region = gsub("South West", "South West (England)", Regions$Region)
Regions$Region = gsub("Wales", "Wales", Regions$Region)
Regions$Region = gsub("Northern Ireland", "Northern Ireland", Regions$Region)
Regions$Region = gsub("Scotland", "Scotland", Regions$Region)
Regions <- as.data.frame(Regions[-c(13,14),])
names(Regions)[1] <- "Region"
percentages$Region <- NA
percentages[1,2] <- "London"
percentages[2,2] <- "South East (England)"
percentages[3,2] <- "North West (England)"
percentages[4,2] <- "East of England"
percentages[5,2] <- "South West (England)"
percentages[6,2] <- "Scotland"
Regions <- merge(Regions, percentages, by="Region", all = TRUE)
View(Regions)
